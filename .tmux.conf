# set a variable to be used later for conditional configuration
run-shell "tmux setenv -g TMUX_VERSION $(tmux -V | cut -d ' ' -f 2)"

# start numbering windows from 1, because the 0 key is too far from 1, 2, ...
set -g base-index 1

# set terminal emulator window title (e.g. XTerm title bar)
set -g set-titles on
set -g set-titles-string "#{session_name}:#{pane_title} #{session_alerts}"

# display current pane title instead of the window name in the status line;
# this works well if you usually have 4-5 windows with pane titles set by
# a plugin like https://github.com/pawel-slowik/zsh-term-title
set -g window-status-format " #[bold]#I#[nobold]:#{=30:pane_title}#F"
set -g window-status-current-format " #[bold]#I#[nobold]:#{=30:pane_title}#F"

# by default, status-right shows the current pane title and a clock, but
# the title is already visible in window-status* (see above) and a clock
# works better as a part of the desktop environment
set -g status-right ""

# similar to the default "[#S] ", but use only spaces instead of mixing spaces
# with []; this looks nicer and is still unambigious thanks to status line
# coloring
set -g status-left " #{session_name} "

# https://github.com/tmux/tmux/wiki/FAQ#how-do-i-use-a-256-colour-terminal
set -g default-terminal "screen-256color"

# get Focus* events and autoread working in terminal Vim, see
# https://github.com/tmux-plugins/vim-tmux-focus-events
set -g focus-events on

# make function keys work the same as in XTerm
set -g xterm-keys on

# avoid the delay between pressing <Esc> and switching modes in Vim;
# 0 is acceptable for local tmux sessions, might not work over a network
set -g escape-time 0

# for selecting URLs, this works better than the default
set -g word-separators " "

# key bindings
set -g prefix C-Space
bind-key R source-file ~/.tmux.conf \; display-message "source-file done"
bind-key Space last-window
bind-key H select-layout even-horizontal
bind-key V select-layout even-vertical
bind-key Tab select-pane -t :.+
bind-key -n C-PageUp previous-window
bind-key -n C-PageDown next-window
# there's no select-word equivalent in earlier versions
if-shell 'printf "$TMUX_VERSION\n2.4" | sort -V -r -c 2> /dev/null' \
	'bind-key -n -T copy-mode-vi y send-keys -X select-word'
# Pane cycling with Ctrl+Tab: the Ctrl+Tab sequence is not directly bindable
# in tmux, so I have bound Ctrl+Tab to KP/ (KP_Divide) in XTerm and then
# KP/ to pane cycling in tmux (KP/ being a key that I basically never use).
# XTerm resources required for this trick:
# xterm*VT100.Translations: #override\n\
# Ctrl <KeyPress> Tab : string("\033Oo") \n
bind-key -n KP/ select-pane -t :.+

# colors
set -g status-style bg=colour17,fg=colour7
set -g status-left-style bg=colour234,fg=colour178
set -g status-right-style bg=colour234,fg=colour178
set -g window-status-current-style bg=colour53
set -g pane-border-style fg=colour8
set -g pane-active-border-style fg=white
